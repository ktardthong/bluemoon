"use strict";function show(e){return console.log(e),JSON.stringify(e,null,2)}function extend(e){var t=Array.prototype.slice.call(arguments,1);return t.forEach(function(t){if(t&&"object"==typeof t)for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])}),e}function moveFbRecord(e,t){e.once("value",function(o){t.set(o.val(),function(t){t?"undefined"!=typeof console&&console.error&&console.error(t):e.remove()})})}var app=angular.module("App",["firebase","angular-md5","ui.router","ngMaterial","angularMoment","flow","slugifier","ngAutocomplete","ngTagsInput","cgNotify","pascalprecht.translate","facebook","angular-web-notification","angular-flexslider","ngSanitize","ui.bootstrap","angular-smilies","ngCookies"]).config(["$mdThemingProvider",function(e){e.definePalette("slack",{50:"ffebee",100:"ffcdd2",200:"ef9a9a",300:"e57373",400:"ef5350",500:"4D394B",600:"e53935",700:"d32f2f",800:"c62828",900:"b71c1c",A100:"ff8a80",A200:"ff5252",A400:"ff1744",A700:"d50000",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100"],contrastLightColors:void 0}),e.theme("default").primaryPalette("slack")}]).config(["FacebookProvider",function(e){var t="931376120263856";e.setAppId(t),e.init(t)}]).config(["$translateProvider",function(e){e.preferredLanguage("Eng"),e.useSanitizeValueStrategy("escape")}]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("home",{url:"/",views:{"":{controller:"HomeCtrl as  homeCtrl",templateUrl:"home/home.html",resolve:{requireNoAuth:["$state","Auth",function(e,t){return t.auth.$requireAuth().then(function(t){e.go("dashboard")},function(e){return e})}],feed:["Topics",function(e){return e.latestFeed()}]}},"login-form@home":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/html/login-form.html"},"header@home":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"}}}).state("trending",{url:"/explore/trending",views:{"":{controller:"HomeCtrl as  homeCtrl",templateUrl:"home/trend.html",resolve:{feed:["Topics",function(e){return e.latestFeed()}]}},"header@trending":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"}}}).state("category",{url:"/category/{Slug}",views:{"":{controller:"CateCtrl as cateCtrl",templateUrl:"category/index.html",resolve:{cateName:["$stateParams","Category",function(e,t){return t.getName(e.Slug).$loaded()}],cateTopics:["$stateParams","Topics",function(e,t){return t.list(e.Slug)}]}},"header@category":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"}}}).state("places",{url:"/places/{place_slug}/{place_id}",views:{"header@places":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"},"":{controller:"PlacesCtrl as placesCtrl",templateUrl:"place/index.html",resolve:{placeLanding:["Places","Topics","$stateParams","$firebaseArray",function(e,t,o,r){var n;return e.getPlaceRef(o.place_id).on("value",function(e){n=e.val(),console.log(e.val())}),n}]}}}}).state("tag",{url:"/tag/{Tag}",views:{"header@tag":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"},"":{controller:"TagCtrl as tagCtrl",templateUrl:"tag/index.html",resolve:{tagName:["$stateParams",function(e){return e.Tag}],tagLanding:["Topics","$stateParams","Tags",function(e,t,o){var r=t.Tag;return e.topicsByTag(r)}]}}}}).state("topic",{url:"/{Slug}",resolve:{Slug:["$stateParams","$state","NotiService","Auth",function(e,t,o,r){o.unreadNotification(r.ref.getAuth().uid),e.Slug=decodeURIComponent(e.Slug),""==e.Slug&&t.go("dashboard")}]},views:{"":{controller:"TopicLandingCtrl as topicLandingCtrl",templateUrl:"topics/index.html",resolve:{isOwner:["Auth","Users","$stateParams","Topics",function(e,t,o,r){var n="";return e.ref.getAuth()?r.fortopic(o.Slug).$loaded().then(function(t){return null!=t[0]?(n=t[0].uid,e.ref.getAuth().uid==n?!0:!1):void 0}):!1}],topicLanding:["$stateParams","Topics",function(e,t){return t.fortopic(e.Slug).$loaded()}],replyList:["$stateParams","Topics","$state",function(e,t,o){var r="";return t.fortopic(e.Slug).$loaded().then(function(e){return null!=e[0]?r=e[0].$id:o.go("topic-notfound"),t.replyList(r)})}],viewData:["$stateParams","Topics","Users","Auth",function(e,t,o,r){var n,i,l=moment().toISOString(),a={userIP:"",created:l};return o.getLocationIP().success(function(e){a.userIP=e.data}).then(function(e){a.userIP=e.data}),t.getTopicBySlug(e.Slug).$loaded().then(function(e){return"undefined"!==e[0].$id&&(n=e[0].$id,i=t.getViews(n),i.obj.$loaded().then(function(e){null==e.count?i.ref.child("count").set(1):i.ref.child("count").set(e.count+1)}),r.auth.$requireAuth().then(function(e){var t=e.uid;i.ref.child("history").child(t).push().set(a),o.userRef(e.uid).child("views").child(n).push().set(a)})),i.obj})}],followers:["$stateParams","Topics",function(e,t){return t.getTopicBySlug(e.Slug).$loaded().then(function(e){var o=e[0].$id;return t.getFollowers(o).obj.$loaded().then(function(e){return e})})}]}},"header@topic":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"}}}).state("topic-notfound",{url:"/err/notfound"}).state("profile",{url:"/profile/{Name}",views:{"":{controller:"ProfileCtrl as profileCtrl",templateUrl:"profile/index.html",resolve:{isOwner:["Auth","Users","$stateParams",function(e,t,o){return e.ref.getAuth()?t.getProfileByUsername(o.Name).$loaded().then(function(t){return t[0].$id==e.ref.getAuth().uid?!0:!1}):!1}],userPosts:["Users","Topics","$stateParams",function(e,t,o){return e.getProfileByUsername(o.Name).$loaded().then(function(e){return e[0].$id?t.createdBy(e[0].$id):void 0})}],profile:["$state","$stateParams","$rootScope","Auth","Users",function(e,t,o,r,n){return n.getProfileByUsername(t.Name).$loaded().then(function(e){return e})}]}},"header@profile":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"}}}).state("acccountEdit",{url:"/account/edit",views:{"passwordEdit@acccountEdit":{url:"/account/changePassword",templateUrl:"profile/passwd.html"},"userEdit@acccountEdit":{url:"/account/edit-form",templateUrl:"profile/edit-form.html"},"":{controller:"ProfileCtrl as profileCtrl",templateUrl:"profile/edit.html",resolve:{userPosts:function(){return!1},isOwner:function(){return!0},profile:["$state","$rootScope","Auth","Users",function(e,t,o,r){return o.auth.$requireAuth().then(function(t){return r.getProfile(t.uid).$loaded().then(function(t){return t.displayName?t:void e.go("get_started")})},function(t){e.go("home")})}],auth:["$state","Users","Auth",function(e,t,o){return o.auth.$requireAuth()["catch"](function(){e.go("home")})}]}},"header@acccountEdit":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"}}}).state("accountPassword",{url:"/account/changePassword",templateUrl:"profile/passwd.html"}).state("accountUserEdit",{url:"/account/edit-form",templateUrl:"profile/edit-form.html"}).state("dashboard",{url:"/user/dashboard",controller:"DashboardCtrl as dashboardCtrl",views:{"":{controller:"ProfileCtrl as profileCtrl",templateUrl:"dashboard/index.html",resolve:{userPosts:function(){return!1},isOwner:function(){return!0},profile:["$state","$rootScope","Auth","Users",function(e,t,o,r){return o.auth.$requireAuth().then(function(t){return r.getProfile(t.uid).$loaded().then(function(o){return o.stat||(r.userRef(t.uid).child("stat/upvoted/count").set(0),r.userRef(t.uid).child("stat/posted/count").set(0),r.userRef(t.uid).child("stat/comment/count").set(0),r.userRef(t.uid).child("stat/follower/count").set(0),r.userRef(t.uid).child("stat/following/count").set(0)),o.displayName?o:void e.go("get_started")})},function(t){return e.go("home"),t})}],auth:["$state","Users","Auth",function(e,t,o){return o.auth.$requireAuth()["catch"](function(){e.go("home")})}]}},"header@dashboard":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"}}}).state("follow_cates",{url:"/user/follow-categories",views:{"":{controller:"ProfileCtrl as profileCtrl",templateUrl:"auth/follow-categories.html",resolve:{userPosts:function(){return!1},isOwner:function(){return!0},profile:["Users","Auth",function(e,t){return t.auth.$requireAuth().then(function(t){return e.getProfile(t.uid).$loaded()})}],auth:["$state","Users","Auth",function(e,t,o){return o.auth.$requireAuth()["catch"](function(){e.go("home")})}]}},"header@follow_cates":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"}}}).state("get_started",{url:"/user/get_started",views:{"":{controller:"ProfileCtrl as profileCtrl",templateUrl:"auth/get_started.html",resolve:{userPosts:function(){return!1},isOwner:function(){return!0},profile:["Users","Auth",function(e,t){return t.auth.$requireAuth().then(function(t){return e.getProfile(t.uid).$loaded()})}],auth:["$state","Users","Auth",function(e,t,o){return o.auth.$requireAuth()["catch"](function(){e.go("home")})}]}},"header@get_started":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"}}}).state("login",{url:"/user/login",views:{"":{templateUrl:"auth/login.html"},"login-form@login":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/html/login-form.html"},"header@login":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"}}}).state("register",{url:"/user/register",views:{"":{controller:"AuthCtrl as authCtrl",templateUrl:"auth/register.html"},"header@register":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"}},resolve:{requireNoAuth:["$state","Auth",function(e,t){return t.auth.$requireAuth().then(function(t){e.go("home")},function(e){return e})}]}}),t.otherwise("/")}]).filter("orderObjectBy",function(){return function(e,t,o){var r=[];return angular.forEach(e,function(e){r.push(e.$id).set(e)}),r.sort(function(e,o){return e[t]>o[t]?1:-1}),o&&r.reverse(),r}}).filter("decodeURI",function(){return function(e){return e?decodeURI(e):""}}).filter("nl2br",["$sce",function(e){return function(t){return t?e.trustAsHtml(t.replace(/\n/g,"<br/>")):""}}]).constant("FirebaseUrl","https://bmxyz.firebaseio.com/");angular.module("App").controller("AuthCtrl",["Auth","Users","$state","$rootScope","$mdSidenav","$translate","$cookies","NotiService",function(e,t,o,r,n,i,l,a){function u(e){return function(){n(e).toggle()}}var s=this;s.auth=e,s.users=t,s.notification=a,null!=e.ref.getAuth()?s.profile=s.users.getProfile(e.ref.getAuth().uid):s.profile="",s.user={email:"",password:""},s.badgeNotification=s.notification.addArrChild(s.profile.$id+"/unread"),s.resetCounter=function(){s.notification.resetUnread(s.profile.$id)},s.toggleLang=function(t){i.use(t),l.put("userLang",t),e.ref.getAuth()&&s.users.userArrRef(e.ref.getAuth().uid).update({lang:t})},s.profile.lang?s.toggleLang(s.profile.lang):l.get("userLang")?s.toggleLang(l.get("userLang")):s.toggleLang("Eng"),s.login=function(){s.auth.auth.$authWithPassword(s.user).then(function(e){o.go("dashboard")},function(e){s.error=e})},s.logout=function(){e.auth.$unauth(),o.go("login")},s.register=function(){e.auth.$createUser(s.user).then(function(e){s.login()},function(e){s.error=e})},s.toggleRight=u("right")}]),angular.module("App").factory("Auth",["$firebaseAuth","FirebaseUrl",function(e,t){var o=new Firebase(t),r=e(o),n={ref:o,auth:r,getUid:function(){var e=o.getAuth();return null!=e?o.getAuth().uid:!1}};return n}]),angular.module("App").controller("CateCtrl",["$state","Category","cateName","cateTopics",function(e,t,o,r){var n=this;n.cateName=o,n.category=t,n.cateTopics=r}]),angular.module("App").factory("CateService",["$firebaseObject","$firebaseArray","FirebaseUrl",function(e,t,o){var r=new Firebase(o+"categories"),n=e(r),i={name:function(t){var o=r.orderByChild("slug").equalTo(t);return e(o)},fortopic:function(t){return e(usersRef.child(uid))},addChild:function(e){return r.child(e)},followList:function(e){var o=r.orderByChild("news/follower").equalTo(e);return t(o)},unFollow:function(e,t){var r=new Firebase(o+"categories/"+e+"/follower/"+t);r.remove()},userFollow:function(e,t){var r=!1,n=new Firebase(o+"categories/"+e+"/follower/"+t);return n.once("value",function(e){r=e.exists()}),r},arr:t(r),all:n};return i}]),angular.module("App").factory("Post",["$firebaseObject","FirebaseUrl",function(e,t){var o=new Firebase(t+"topics"),r=e(o),n={topicName:function(t){var r=o.orderByChild("slug").equalTo(t);return e(r)},fortopic:function(t){return e(usersRef.child(uid))},all:r};return n}]),angular.module("App").controller("DashboardCtrl",["Auth","$state","Category","CateService","Tags","$timeout","$mdSidenav","$log",function(e,t,o,r,n,i,l,a){var u=this;u.auth=e,u.cate=r,u.categories=o.all,u.topic_grid=!1,u.tags=n.arr,u.userCateFollow=[],u.cateIsFollow=[],u.followList="",u.close=function(){l("right").close()},u.followCate=function(t){u.cate.addChild(t+"/follower").child(e.ref.getAuth().uid).push().set(moment().toISOString())}}]),angular.module("App").directive("reviewScore",function(){return{restrict:"E",transclude:!0,controller:"TopicCtrl as topicCtrl",templateUrl:"templates/html/review-summary-list.html",scope:{review:"="}}}).directive("userFollowerBtn",function(){return{restrict:"E",transclude:!0,controller:"TopicCtrl as topicCtrl",templateUrl:"templates/html/follow-user.html",scope:{follow:"="}}}).directive("cateFollowBtn",function(){return{controller:"DashboardCtrl as dashboardCtrl",templateUrl:"templates/html/category-follow-btn.html",scope:{cate:"="}}}).directive("topicGrid",function(){return{controller:"DashboardCtrl as dashboardCtrl",templateUrl:"templates/html/category-grid.html"}}).directive("tagGrid",function(){return{controller:"DashboardCtrl as dashboardCtrl",templateUrl:"templates/html/tag-grid.html"}}).directive("topicCreate",function(){return{controller:"TopicCtrl as topicCtrl",templateUrl:"templates/html/topic-create.html",scope:{topic:"="}}}).directive("topicList",function(){return{controller:"TopicCtrl as topicCtrl",templateUrl:"templates/html/topic-list.html",scope:{topics:"="}}}).directive("topicActionsCard",function(){return{controller:"TopicCtrl as topicCtrl",templateUrl:"templates/html/topic-actions-card.html",scope:{topic:"="}}}).directive("enforceMaxTags",function(){return{require:"ngModel",link:function(e,t,o,r){var n=o.maxTags?parseInt(o.maxTags,"4"):null;r.$parsers.push(function(e){return e&&n&&e.length>n&&e.splice(e.length-1,1),e})}}}),angular.module("App").controller("HomeCtrl",["$state","Category","Topics","feed",function(e,t,o,r){var n=this;n.topics=t,n.topics=o,n.feed=r}]),angular.module("App").config(["$translateProvider",function(e){e.translations("Eng",{KEY_DASHBOARD:"Dashboard",KEY_LANGUAGES:"Languages",KEY_HOME:"Home",KEY_REGISTER:"Register",KEY_LOGIN:"Log in",KEY_LOGOUT:"Log out",KEY_FOLLOW:"Follow",KEY_FOLLOWER:"Follower",KEY_UNFOLLOW:"Unfollow",KEY_FOLLOWING:"Following",KEY_POST:"Post",KEY_POSTED:"Posted",KEY_UPVOTE:"Upvote",KEY_UPVOTED:"Upvoted",KEY_DWN_VOTE:"Downvote",KEY_DWN_VOTED:"Downvoted",KEY_VIEW:"View",KEY_REMOVE:"Remove",KEY_CANCEL:"Cancel",KEY_QUESTION:"Question",KEY_TOPIC:"Topic",KEY_CHG_PWD:"Change Password",KEY_PASSWORD:"Password",KEY_OLD_PWD:"Old Password",KEY_NEW_PWD:"New Password",KEY_NEW_PWD_C:"New password confirmation",KEY_SAVE:"Save",KEY_SAVE_DRAFT:"Save as draft",KEY_TAGS:"Tags",KEY_EXPLORE:"Explore",KEY_COMMENTS:"Comments",KEY_REPLY:"Reply",KEY_REVIEW:"Review",KEY_EDIT:"Edit",KEY_TREND:"Trend",KEY_TRENDING:"Trending",KEY_WRITE_REPLY:"Write a reply",KEY_LATEST_FEED:"Latest Feed",KEY_CONF_REMOVE:"Are you sure you want to remove?",KEY_CONF_REM_C:"Once remove, you will not be ableto to get this topic back",KEY_WHAT_ON_UR_MIND:"What's on your mind?",KEY_YOU_WANT_FOLLOW:"You may want to follow",KEY_NO_ACCT_REGISTER:"Don't have account? Register",KEY_CANT_CHNG_USER:"Don't have account? Register",KEY_YOUR_ACCOUNT:"Your account",KEY_NOTHING_HERE:"Nothing here, yet",KEY_WHO_TO_FOLLOW:"Who to follow",KEY_CAT_WILL_APPEAR:"Follow some categories and it will appear here",KEY_WHT_UR_STORY:"What's your story",KEY_WRT_COMMENT:"Write a comment",KEY_FIRSTNAME:"First name",KEY_LASTNAME:"Last name",KEY_BIRTHDAY:"Birthday",KEY_MONTH:"Month",KEY_DAY:"Day",KEY_EMAIL:"Email",KEY_CONF_EMAIL:"Confirm Email",KEY_GENDER:"Gender",KEY_MALE:"Male",KEY_FEMALE:"Female",KEY_USERNAME:"Username",KEY_LOCATION:"Location",KEY_ED_PROFILE:"Edit Profile",KEY_ED_CHG_PWD:"Change Password",KEY_ED_PROFILE:"Edit Profile",KEY_ED_SITE:"Website",KEY_ED_PHONE:"Phone",KEY_ED_BIO:"Biography"}),e.translations("ไทย",{KEY_DASHBOARD:"ห้องทั้งหมด",KEY_LANGUAGES:"ภาษา",KEY_HOME:"หน้าแรก",KEY_REGISTER:"สมัครใช้",KEY_LOGIN:"เข้าสู่ระบบ",KEY_FOLLOW:"ติดตาม",KEY_POST:"โพสต์"}),e.preferredLanguage("en")}]),angular.module("App").controller("NotiCtrl",["$state","Category","Topics","NotiService",function(e,t,o,r){var n=this;n.topics=o,n.feed=feed,n.notiService=r,n.notifyTo=function(e){return n.arr.push(e).$add(e)}}]),angular.module("App").factory("NotiService",["$firebaseObject","$firebaseArray","FirebaseUrl","Users",function(e,t,o,r){var n=new Firebase(o+"notification"),i=e(n),l=r,a={unreadNotification:function(t){var r=new Firebase(o+"notification/"+t);console.log(e(r.orderByChild("is_read").equalTo("false")))},notifyFollower:function(e,t){var o=l.getFollower(t);o.once("value",function(t){t.forEach(function(t){a.updateNotificationCount(e,t.key())})})},notifyLog:function(e,t){a.addChild(t).push().set({topicId:e,from:t,is_read:!1,timestamp:moment().toISOString()})},resetUnread:function(e){var t=new Firebase(o+"notification/"+e+"/unread");t.set(0)},updateNotificationCount:function(e,t){console.log(">>>"+t);var r=new Firebase(o+"notification/"+t+"/unread");r.once("value",function(e){"null"==e.val()?r.set(1):r.set(e.val()+1)},function(e){console.log("The read failed: "+e.code)}).then(function(){a.notifyLog(e,t)})},addChild:function(e){return n.child(e)},addArrChild:function(t){return e(n.child(t))},arr:t(n),all:i};return a}]),angular.module("App").controller("PlacesCtrl",["$state","$scope","$rootScope","$mdDialog","$mdMedia","Tags","Topics","Auth","Users","Slug","Languages","placeLanding",function(e,t,o,r,n,i,l,a,u,s,c,d){var f=this;console.log(d),f.placeLanding=d}]),angular.module("App").factory("Places",["$firebaseArray","FirebaseUrl",function(e,t){var o=new Firebase(t+"places"),r=new Firebase(t+"places_details"),n=e(o),i={addChild:function(e){return o.child(e)},addPlaceDetailChild:function(e){return r.child(e)},getPlaceRef:function(e){return o.child(e+"/info")},arr:n};return i}]),angular.module("App").factory("Category",["$firebaseObject","$firebaseArray","FirebaseUrl",function(e,t,o){var r=new Firebase(o+"categories"),n=e(r),i=(t(r),{getName:function(t){var o=r.child(t);return e(o)},all:n});return i}]).factory("Languages",["$firebaseArray","FirebaseUrl",function(e,t){var o=new Firebase(t+"languages"),r=e(o);return r}]).factory("Archive",["$firebaseArray","FirebaseUrl",function(e,t){var o=new Firebase(t+"archive"),r=e(o),n={addChild:function(e){return o.child(e)},ref:o,arr:r};return n}]),angular.module("App").controller("TagCtrl",["Auth","Users","$state","$rootScope","tagLanding","tagName",function(e,t,o,r,n,i){var l=this;l.tagLanding=n,l.tagName=i}]),angular.module("App").factory("Tags",["$firebaseArray","$firebaseObject","FirebaseUrl","$q",function(e,t,o,r){var n=new Firebase(o+"tags"),i=e(n),l={addChild:function(e){return n.child(e)},tagsUrl:function(){return e(n)},getTagRef:function(e){return n.child(e)},getTagObject:function(e){return t(n.child(e))},topicTags:function(e){var t=r.defer(),n=new Firebase(o);return n.child("tags/"+e).on("child_added",function(o){n.child("topics").orderByChild("tags").equalTo(e).on("child_added",function(e){return t.resolve(),extend({},o.val(),e.val())})})},arr:i};return l}]),angular.module("App").controller("TopicLandingCtrl",["$state","$scope","Slug","Topics","Auth","Users","isOwner","topicLanding","replyList","viewData","followers",function(e,t,o,r,n,i,l,a,u,s,c){var d=this;d.auth=n,d.users=i,d.topicLanding=a,d.topics=r,d.replyList=u,d.views=s,d.followers=c,d.isOwner=l,d.inReplyArr=[],d.replyInReply=function(){for(var e=0;e<d.replyList.length;e++){var t=d.replyList[e].topicId,o=d.replyList[e].$id;d.inReplyArr[e]=d.topics.replyInReply(t,o)}},d.replyInReply()}]),angular.module("App").controller("TopicCtrl",["$state","$scope","$rootScope","$mdDialog","$mdMedia","$http","FirebaseUrl","$translate","NotiService","Tags","Topics","Auth","Users","Slug","Places","Languages","Archive",function(e,t,o,r,n,i,l,a,u,s,c,d,f,p,h,g,m){var v=this;v.tags=s,v.topics=c,v.auth=d,v.users=f,v.languages=g,v.places=h,v.archive=m,v.noti=u,null!=v.auth.ref.getAuth()?(v.profile=v.users.getProfile(v.auth.ref.getAuth().uid),v.uid=v.profile.$id,v.userRef=v.users.userRef(v.uid),v.userUpvotedTopics=v.users.upvotes(v.uid),v.userDownvotedTopics=v.users.downvotes(v.uid),v.userFollowing=v.users.following(v.uid)):(v.profile="",v.uid="",v.userRef=""),v.imageStrings=[],v.imageText=[],v.inReplyArr=[],v.loadBusy=!1,v.slugReturn=null,v.criteria=!1,v.criteriaReply=null,v.reviewCriteria=!1,v.critReplyData=null,v.newTopic={location:"",url:"",ipInfo:"",tags:"",body:""},v.avgReviewReply=function(){for(var e=Object.keys(v.criteriaReply).length,t=0,o=0;e>o;o++)t+=v.criteriaReply[o];v.replyReviewAverage=t/e,console.log(v.criteriaReply),v.critReplyData={avg:v.replyReviewAverage,data:v.criteriaReply}},v.avgReviewScore=function(e){if(e){for(var t=0,o=0;o<e.length;o++)t+=e[o].rating;return t/e.length}},a(["KEY_REMOVE","KEY_CANCEL","KEY_CONF_REMOVE","KEY_CONF_REM_C"]).then(function(e){v.removeTrans=e.KEY_REMOVE,v.cancelTrans=e.KEY_CANCEL,v.confirmRem=e.KEY_CONF_REMOVE,v.confirmRemContent=e.KEY_CONF_REM_C}),v.userName=function(e){return null!=e?v.users.getDisplayName(e):void 0},v.showMdLogin=function(e){var o=(n("sm")||n("xs"))&&t.customFullscreen;r.show({controller:"AuthCtrl as authCtrl",templateUrl:"templates/html/md-login-form.html",parent:angular.element(document.body),targetEvent:e,clickOutsideToClose:!0,fullscreen:o})},v.decodeText=function(e){return console.log(decodeURI(e)),decodeURI(e)},v.loadMore=function(e){v.loadBusy=!0;for(var t=[],o=0;o<e.length;o++)t.push(e[o]);return console.log(t),t},v.loadTags=function(e){console.log(v.tags.tagsUrl())},v.uploadFile=function(e,t){angular.forEach(e,function(e,t){var o=new FileReader;o.onload=function(e){var o=e.target.result;v.imageStrings[t]=o},o.readAsDataURL(e.file)})},v.showConfirmRemove=function(t,o,n){var i=r.confirm().title(v.confirmRem).textContent(v.confirmRemContent).targetEvent(t).ok(v.removeTrans).cancel(v.cancelTrans);r.show(i).then(function(){v.removeTopic(o,n)&&e.go("dashboard")})},v.removeTopic=function(e,t){return e==v.uid?(moveFbRecord(v.topics.refChild(t.$id),v.archive.addChild(t.$id)),!0):!1},v.reply=function(e){v.topics.replyArr(e.$id).$add({topicId:e.$id,body:v.newReply.body,uid:v.uid,review:v.critReplyData,created:moment().toISOString()}),v.noti.updateNotificationCount(e.uid,v.uid),v.topics.replyCount(e.$id).$loaded().then(function(t){t.count?v.topics.replyCountRef(e.$id).set(t.count+1):v.topics.replyCountRef(e.$id).set(1)}),v.users.userRef(v.uid).child("stat/comment/count").set(v.profile.stat.comment.count+1),v.users.userRef(v.uid).child("stat/comment/topics/"+e.$id).push().set(moment().toISOString())},v.replyInReply=function(e,t){v.topics.replyInReplyArr(e,t).$add({body:v.replyInReply.body,uid:v.uid,created:moment().toISOString()})},v.addNewChoice=function(){var e=v.reviewCriteria.length+1;v.reviewCriteria.push({id:"criteria"+e})},v.removeChoice=function(){var e=v.reviewCriteria.length-1;v.reviewCriteria.splice(e)},v.createTopic=function(e,t){var o="";""!==v.newTopic.location&&(console.log(v.newTopic.location),o={place_id:v.newTopic.location.details.place_id,slug:p.slugify(v.newTopic.location.details.name),name:v.newTopic.location.details.name,address:v.newTopic.location.details.formatted_address,lat:v.newTopic.location.details.geometry.location.lat(),lng:v.newTopic.location.details.geometry.location.lng(),lng:v.newTopic.location.details.geometry.location.lng(),lng:v.newTopic.location.details.geometry.location.lng()}),v.topics.arr.$add({type:v.type,lang:v.newTopic.lang,topic:v.newTopic.topic,body:v.newTopic.body,category:e,uid:v.uid,slug:v.newTopic.topic,photos:v.imageStrings,photos_text:v.imageText,location:o,url:v.newTopic.url,draft:t,created:moment().toISOString(),tags:v.newTopic.tags,userIP:v.newTopic.ipInfo,review:v.reviewCriteria}).then(function(e){var t="";if(t=""==p.slugify(v.newTopic.topic)?v.newTopic.topic:p.slugify(v.newTopic.topic),v.topics.getTopicByKey(e.key()).update({slug:t+e.key()}),v.users.userRef(v.uid).child("stat/posted/count").set(v.profile.stat.posted.count+1),v.users.userRef(v.uid).child("stat/posted/topics/"+e.key()).push().set(moment().toISOString()),""!==o&&(v.places.addChild(o.place_id).child(e.key()).push().set(moment().toISOString()),v.places.addChild(o.place_id).child("info").set(o)),null!==v.newTopic.tags)for(var r=0;r<v.newTopic.tags.length;++r)v.tags.addChild(v.newTopic.tags[r].text).child(e.key()).push().set(moment().toISOString());v.noti.notifyFollower(e.key(),v.uid),v.newTopic={body:""}})},v.checkFollow=function(e){return v.users.checkFollow(v.uid,e)?!0:!1},v.followUser=function(e){v.users.getProfile(e).$loaded().then(function(t){v.users.userRef(e).child("stat/follower/count").set(t.stat.follower.count+1),v.users.userRef(e).child("stat/follower/uid/"+v.uid).push().set(moment().toISOString())}),v.users.getProfile(v.uid).$loaded().then(function(t){v.users.userRef(v.uid).child("stat/following/count").set(t.stat.follower.count+1),v.users.userRef(v.uid).child("stat/following/uid/"+e).push().set(moment().toISOString())})},v.unfollowUser=function(e){v.users.getProfile(e).$loaded().then(function(t){v.users.userRef(e).child("stat/follower/count").set(t.stat.follower.count-1),v.users.userRef(e).child("stat/follower/uid/"+v.uid).remove()}),v.users.getProfile(v.uid).$loaded().then(function(t){v.users.userRef(v.uid).child("stat/following/count").set(t.stat.following.count-1),v.users.userRef(v.uid).child("stat/following/uid/"+e).remove()})},v.upvote=function(e){void 0!=e.downvotes&&void 0!=e.downvotes[v.uid]&&v.cancelDownvote(e),v.topics.upvoteTopic(e.$id,v.uid).$loaded().then(function(t){v.userUpvotedTopics.child(e.$id).set(t.$value),v.users.getProfile(e.uid).$loaded().then(function(t){v.users.userRef(e.uid).child("stat/upvoted/count").set(t.stat.upvoted.count+1),v.users.userRef(e.uid).child("stat/upvoted/topics/"+e.$id).push().set(moment().toISOString())})})},v.cancelUpvote=function(e){v.topics.undoUpvote(e.$id,v.uid),v.users.getProfile(e.uid).$loaded().then(function(t){v.users.userRef(e.uid).child("stat/upvoted/count").set(t.stat.upvoted.count-1),v.users.userRef(e.uid).child("stat/upvoted/topics/"+e.$id).remove()}),v.userUpvotedTopics.child(e.$id).remove(function(e){e?console.log("Error:",e):console.log("Removed successfully!")})},v.downvote=function(e){void 0!=e.upvotes&&void 0!=e.upvotes[v.uid]&&v.cancelUpvote(e),v.topics.downvoteTopic(e.$id,v.uid).$loaded().then(function(t){v.userDownvotedTopics.child(e.$id).set(t.$value)})},v.cancelDownvote=function(e){v.topics.undoDownvote(e.$id,v.uid),v.userDownvotedTopics.child(e.$id).remove(function(e){e?console.log("Error:",e):console.log("Removed successfully!")})},v.followTopic=function(e){v.topics.follow(e.$id,v.uid).$loaded().then(function(t){v.userFollowing.child(e.$id).set(t.history[v.uid])})},v.unfollowTopic=function(e){v.topics.unfollow(e.$id,v.uid),v.userFollowing.child(e.$id).remove(function(e){e?console.log("Error:",e):console.log("Removed successfully!")})}}]),angular.module("App").factory("Topics",["$firebaseObject","$firebaseArray","FirebaseUrl",function(e,t,o){var r=new Firebase(o+"topics"),n=e(r),i=(t(r),{getTag:function(e){return t(r.orderByChild("tags").equalTo(e))},getSlug:function(e){var o=r.orderByChild("slug").equalTo(e);return t(o)},createdBy:function(e){return t(r.orderByChild("uid").equalTo(e))},refChild:function(e){return r.child(e)},countUserTopics:function(){},list:function(e){var o=r.orderByChild("category").equalTo(e);return t(o)},name:function(t){var o=r.orderByChild("slug").equalTo(t);return e(o)},fortopicRef:function(e){return r.orderByChild("slug").equalTo(e)},getTopicByKey:function(e){return new Firebase(o+"topics/"+e)},getTopicBySlug:function(e){return t(r.orderByChild("slug").equalTo(e).limitToFirst(1))},incrementView:function(e){},fortopic:function(e){return t(i.fortopicRef(e))},replyList:function(e){var o=r.child(e+"/replies");return t(o)},replyArr:function(e){return t(r.child(e+"/replies"))},replyCount:function(t){return e(r.child(t+"/replies/"))},replyCountRef:function(e){return r.child(e+"/replies/count")},replyInReply:function(e,o){return t(r.child(e+"/replies/"+o+"/inReply"))},replyInReplyArr:function(e,o){return t(r.child(e+"/replies/"+o+"/inReply"))},getUpvotes:function(e){return{ref:r.child(e+"/upvotes"),array:t(r.child(e+"/upvotes"))}},getDownvotes:function(e){return{ref:r.child(e+"/downvotes"),array:t(r.child(e+"/downvotes"))}},getFollowers:function(t){return{ref:r.child(t+"/followers"),obj:e(r.child(t+"/followers"))}},upvoteTopic:function(t,o){return r.child(t+"/upvotes").child(o).set(moment().toISOString()),e(r.child(t+"/upvotes").child(o))},undoUpvote:function(e,t){return r.child(e+"/upvotes").child(t).remove(function(e){e?console.log("Error:",e):console.log("Removed successfully!")}),r.child(e+"/upvotes")},downvoteTopic:function(t,o){return r.child(t+"/downvotes").child(o).set(moment().toISOString()),e(r.child(t+"/downvotes").child(o))},undoDownvote:function(e,t){return r.child(e+"/downvotes").child(t).remove(function(e){e?console.log("Error:",e):console.log("Removed successfully!")}),r.child(e+"/downvotes")},follow:function(t,o){return r.child(t+"/followers").child("history").child(o).set(moment().toISOString()),e(r.child(t+"/followers").child("count")).$loaded().then(function(e){null===e.value||void 0===e.value?r.child(t+"/followers").child("count").set(1):r.child(t+"/followers").child("count").set(e.$value+1)}),e(r.child(t+"/followers"))},unfollow:function(t,o){return r.child(t+"/followers").child("history").child(o).remove(function(o){o?console.log("Error:",o):(console.log("Removed successfully!"),e(r.child(t+"/followers").child("count")).$loaded().then(function(e){r.child(t+"/followers").child("count").set(e.$value-1)}))}),r.child(t+"/followers")},getViews:function(t){return{ref:r.child(t).child("views"),obj:e(r.child(t).child("views"))}},latestFeed:function(){return t(r.orderByChild("created").limitToLast(10))},topicsByTag:function(e){return t(r.orderByChild("tags").equalTo(e))},arr:t(r),all:n,ref:r});return i}]),angular.module("App").controller("ProfileCtrl",["$scope","$rootScope","$state","$filter","md5","Auth","Users","Topics","Facebook","notify","CateService","profile","isOwner","userPosts",function(e,t,o,r,n,i,l,a,u,s,c,d,f,p){var h=this;h.profile=d,h.auth=i,h.users=l,h.topics=a,h.facebook=u,h.isOwner=f,h.cate=c,h.$state=o,h.userPosts=p,h.feed="",h.editInit="userEdit",h.nameExist=!1,h.getUserPost=function(e){h.feed=h.topics.createdBy(e)},h.linkFacebook=function(){h.facebook.login(function(t){h.facebook.getLoginStatus(function(t){"connected"===t.status?(e.loggedIn=!0,h.facebook.api("/me",function(e){console.log(e)})):console.log("not logged in")})})},h.oldProfileValue=h.profile,h.userCreated=function(e){return h.topics.createdBy(e)},h.imageStrings=[],h.userCateFollow=[],h.cateIsFollow=[],h.followList="",h.followCateListArr=function(e){h.followList=h.cate.followList(e)},i.ref.getAuth()&&h.followCateListArr(i.ref.getAuth().uid),h.followCate=function(e,t){h.cateIsFollow[e]=!0,h.cate.addChild(t+"/follower").child(i.ref.getAuth().uid).push().set(moment().toISOString())},h.uploadFile=function(e){angular.forEach(e,function(e,t){var o=new FileReader;o.onload=function(e){var o=e.target.result;h.imageStrings[t]=o,h.users.userArrRef(i.ref.getAuth().uid).update({photo:o}),s({message:"Saved",position:"center",duration:3e3})},o.readAsDataURL(e.file)})},h.saveProfile=function(e){h.profile.updated=moment().toISOString(),
null!==h.location&&(locationDetail={place_id:h.location.details.place_id,name:h.location.details.name,address:h.location.details.formatted_address,lat:h.location.details.geometry.location.lat(),lng:h.location.details.geometry.location.lng()},h.profile.userLocation=locationDetail),h.profile.$save().then(function(){s({message:"Saved",position:"center",duration:3e3}),void 0!==e&&o.go(e)})["catch"](function(e){s({message:"Error saving data",position:"center",duration:3e3})})},h.updateName=function(){h.users.userArrRef(i.ref.getAuth().uid).update({firstname:h.profile.firstname,lastname:h.profile.lastname}),h.users.userArrRef(i.ref.getAuth().uid+"/log").push().set({action:"name_change",oldname:h.oldProfileValue.firstname+"-"+h.oldProfileValue.lastname,created:moment().toISOString()}),s({message:"Saved",position:"center",duration:3e3})},h.updateBio=function(){h.users.userArrRef(i.ref.getAuth().uid).update({biography:h.profile.biography}),s({message:"Saved",position:"center",duration:3e3})},h.updateProfile=function(){h.profile.$save().then(function(){o.go("dashboard")})},h.checkUsername=function(){h.users.checkUsernameExist(h.profile.displayName).once("value",function(e){return null!==e.val()?h.nameExist=!0:h.nameExist=!1})}}]),angular.module("App").factory("Users",["$firebaseArray","$firebaseObject","FirebaseUrl","$http",function(e,t,o,r){var n=new Firebase(o+"users"),i=e(n),l={getLocationIP:function(){return r({url:"http://ipinfo.io/json",method:"GET"})},getLocationIPData:function(){return r({url:"http://ipinfo.io/json",method:"GET"}).then(function(e){return e.data})},profile:function(e){return i.$getRecord(e)},getProfileByUsername:function(t){return e(n.orderByChild("displayName").equalTo(t))},checkUsernameExist:function(e){return n.orderByChild("displayName").equalTo(e)},getProfile:function(e){return t(n.child(e))},getDisplayName:function(e){return null==e||""===e?"":i.$getRecord(e).displayName},getFollower:function(e){return n.child(e+"/stat/follower/uid")},checkFollow:function(e,t){var r=!1,n=new Firebase(o+"users/"+e+"/stat/following/uid/"+t);return n.once("value",function(e){r=e.exists()}),r},userChangePassword:function(e,t,r){var n=new Firebase(o);n.changePassword({email:e,oldPassword:t,newPassword:r},function(e){if(e)switch(e.code){case"INVALID_PASSWORD":console.log("The specified user account password is incorrect.");break;case"INVALID_USER":console.log("The specified user account does not exist.");break;default:console.log("Error changing password:",e)}else console.log("User password changed successfully!")})},userRef:function(e){return n.child(e)},upvotes:function(e){return n.child(e).child("upvotes")},downvotes:function(e){return n.child(e).child("downvotes")},following:function(e){return n.child(e).child("following")},userArrRef:function(e){return n.child(e)},all:i};return l}]);
//# sourceMappingURL=data:application/json;base64,
