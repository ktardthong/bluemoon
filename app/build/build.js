"use strict";function show(e){return console.log(e),JSON.stringify(e,null,2)}function extend(e){var t=Array.prototype.slice.call(arguments,1);return t.forEach(function(t){if(t&&"object"==typeof t)for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])}),e}function moveFbRecord(e,t){e.once("value",function(o){t.set(o.val(),function(t){t?"undefined"!=typeof console&&console.error&&console.error(t):e.remove()})})}var app=angular.module("App",["firebase","angular-md5","ngRoute","ui.router","ngMaterial","angularMoment","flow","slugifier","ngAutocomplete","ngTagsInput","cgNotify","pascalprecht.translate","angular-flexslider","ngSanitize","ui.bootstrap","angular-smilies","ngCookies","notification"]).config(["$mdThemingProvider",function(e){e.definePalette("slack",{50:"ffebee",100:"ffcdd2",200:"ef9a9a",300:"e57373",400:"ef5350",500:"4D394B",600:"e53935",700:"d32f2f",800:"c62828",900:"b71c1c",A100:"ff8a80",A200:"ff5252",A400:"ff1744",A700:"d50000",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100"],contrastLightColors:void 0}),e.theme("default").primaryPalette("slack")}]).config(["$translateProvider",function(e){e.preferredLanguage("Eng"),e.useSanitizeValueStrategy("escape")}]).config(["$stateProvider","$urlRouterProvider","$controllerProvider",function(e,t,o){app.registerCtrl=o.register,e.state("home",{url:"/",views:{"":{controller:"DashboardCtrl as  dashboardCtrl",templateUrl:"home/home.html",resolve:{requireNoAuth:["$state","Auth",function(e,t){return t.auth.$requireAuth().then(function(t){e.go("dashboard")},function(e){return e})}]}},"login-form@home":{templateUrl:"templates/html/login-form.html"}}}).state("trending",{url:"/explore/trending",views:{"":{controller:"DashboardCtrl as  dashboardCtrl",templateUrl:"home/trend.html",resolve:{feed:["Topics",function(e){return e.latestFeed()}]}}}}).state("category",{url:"/category/{Slug}",views:{"":{templateUrl:"category/index.html",resolve:{cateName:["$stateParams","Category",function(e,t){return t.getName(e.Slug).$loaded()}],cateTopics:["$stateParams","Topics",function(e,t){return t.list(e.Slug)}]}}}}).state("places",{url:"/places/{place_slug}/{place_id}",views:{"header@places":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"},"":{controller:"PlacesCtrl as placesCtrl",templateUrl:"place/index.html",resolve:{placeLanding:["Places","Topics","$stateParams","$firebaseArray",function(e,t,o,r){var n;return e.getPlaceRef(o.place_id).on("value",function(e){n=e.val(),console.log(e.val())}),n}]}}}}).state("tag",{url:"/tag/{Tag}",views:{"header@tag":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"},"":{controller:"TagCtrl as tagCtrl",templateUrl:"tag/index.html",resolve:{tagName:["$stateParams",function(e){return e.Tag}],tagLanding:["Topics","$stateParams","Tags",function(e,t,o){var r=t.Tag;return e.topicsByTag(r)}]}}}}).state("topic",{url:"/{Slug}",resolve:{},views:{"":{controller:"TopicLandingCtrl as topicLandingCtrl",templateUrl:"topics/index.html",resolve:{isOwner:["Auth","Users","$stateParams","Topics",function(e,t,o,r){var n="";return e.ref.getAuth()?r.fortopic(o.Slug).$loaded().then(function(t){return null!=t[0]?(n=t[0].uid,e.ref.getAuth().uid==n?!0:!1):void 0}):!1}],topicLanding:["$stateParams","Topics",function(e,t){return t.fortopic(e.Slug).$loaded()}],replyList:["$stateParams","Topics","$state","FirebaseUrl","$q",function(e,t,o,r,n){var i="",l=[],a=n.defer();return t.fortopic(e.Slug).$loaded().then(function(e){null!=e[0]?i=e[0].$id:o.go("topic-notfound");var t=new Firebase(r);return t.child("topics/"+i+"/replies").once("value",function(o){o.forEach(function(o){var r=o.key();t.child("topics/"+i+"/replies/"+r).once("value",function(o){t.child("users/"+o.val().uid).once("value",function(t){e=extend({},o.val(),t.val()),l.push({uid:e.uid,firstname:e.firstname,lastname:e.lastname,photo:e.photo,displayName:e.displyName,body:e.body,created:e.created}),a.resolve(l)})})})}),a.promise})}],viewData:["$stateParams","Topics","Users","Auth",function(e,t,o,r){var n,i,l=moment().toISOString(),a={userIP:"",created:l};return o.getLocationIP().success(function(e){a.userIP=e.data}).then(function(e){a.userIP=e.data}),t.getTopicBySlug(e.Slug).$loaded().then(function(e){return"undefined"!==e[0].$id&&(n=e[0].$id,i=t.getViews(n),i.obj.$loaded().then(function(e){null==e.count?i.ref.child("count").set(1):i.ref.child("count").set(e.count+1)}),r.auth.$requireAuth().then(function(e){var t=e.uid;i.ref.child("history").child(t).push().set(a),o.userRef(e.uid).child("views").child(n).push().set(a)})),i.obj})}],followers:["$stateParams","Topics",function(e,t){return t.getTopicBySlug(e.Slug).$loaded().then(function(e){var o=e[0].$id;return t.getFollowers(o).obj.$loaded().then(function(e){return e})})}]}}}}).state("topic-notfound",{url:"/err/notfound"}).state("profile",{url:"/profile/{Name}",views:{"":{controller:"ProfileCtrl as profileCtrl",templateUrl:"profile/index.html",resolve:{isOwner:["Auth","Users","$stateParams",function(e,t,o){return e.ref.getAuth()?t.getProfileByUsername(o.Name).$loaded().then(function(t){return t[0].$id==e.ref.getAuth().uid?!0:!1}):!1}],userPosts:["Users","Topics","$stateParams",function(e,t,o){return e.getProfileByUsername(o.Name).$loaded().then(function(e){return"undefined"!==e[0].$id?t.createdBy(e[0].$id):void 0})}],profile:["$state","$stateParams","$rootScope","Auth","Users",function(e,t,o,r,n){return n.getProfileByUsername(t.Name).$loaded().then(function(e){return e})}]}},"header@profile":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"}}}).state("acccountEdit",{url:"/account/edit",views:{"passwordEdit@acccountEdit":{url:"/account/changePassword",templateUrl:"profile/passwd.html"},"userEdit@acccountEdit":{url:"/account/edit-form",templateUrl:"profile/edit-form.html"},"":{controller:"ProfileCtrl as profileCtrl",templateUrl:"profile/edit.html",resolve:{userPosts:function(){return!1},isOwner:function(){return!0},profile:["$state","$rootScope","Auth","Users",function(e,t,o,r){return o.auth.$requireAuth().then(function(t){return r.getProfile(t.uid).$loaded().then(function(t){return t.displayName?t:void e.go("get_started")})},function(t){e.go("home")})}],auth:["$state","Users","Auth",function(e,t,o){return o.auth.$requireAuth()["catch"](function(){e.go("home")})}]}}}}).state("accountPassword",{url:"/account/changePassword",templateUrl:"profile/passwd.html"}).state("accountUserEdit",{url:"/account/edit-form",templateUrl:"profile/edit-form.html"}).state("dashboard",{url:"/user/dashboard",views:{"":{controller:"ProfileCtrl as profileCtrl",templateUrl:"dashboard/index.html",resolve:{userPosts:function(){return!1},isOwner:function(){return!0},profile:["$state","$rootScope","Auth","Users",function(e,t,o,r){return o.auth.$requireAuth().then(function(t){return r.getProfile(t.uid).$loaded().then(function(o){return o.stat||(r.userRef(t.uid).child("stat/upvoted/count").set(0),r.userRef(t.uid).child("stat/posted/count").set(0),r.userRef(t.uid).child("stat/comment/count").set(0),r.userRef(t.uid).child("stat/follower/count").set(0),r.userRef(t.uid).child("stat/following/count").set(0)),o.displayName?o:void e.go("get_started")})},function(t){return e.go("home"),t})}],auth:["$state","Users","Auth",function(e,t,o){return o.auth.$requireAuth()["catch"](function(){e.go("home")})}]}}}}).state("dashboard.list",{url:"/feed/{Slug}",views:{"":{controller:"CateCtrl as cateCtrl",templateUrl:"category/index.html",resolve:{cateName:["$stateParams","Category",function(e,t){return t.getName(e.Slug).$loaded()}],cateTopics:["$stateParams","Topics","FirebaseUrl","$q",function(e,t,o,r){var n,i=[],l=r.defer(),a=new Firebase(o);return t.list(e.Slug).$loaded().then(function(e){for(var t=0;t<e.length;t++)a.child("topics/"+e[t].$id).once("value",function(o){a.child("users/"+e[t].uid).once("value",function(e){n=extend({},o.val(),e.val()),i.push({topic:n.topic,slug:n.slug,uid:n.uid,firstname:n.firstname,lastname:n.lastname,photo:n.photo,displayName:n.displayName,body:n.body,created:n.created,photos:n.photos,postedCount:n.stat.posted.count}),l.resolve(i)})});return l.promise})}]}}}}).state("follow_cates",{url:"/user/follow-categories",views:{"":{controller:"ProfileCtrl as profileCtrl",templateUrl:"auth/follow-categories.html",resolve:{userPosts:function(){return!1},isOwner:function(){return!0},profile:["Users","Auth",function(e,t){return t.auth.$requireAuth().then(function(t){return e.getProfile(t.uid).$loaded()})}],auth:["$state","Users","Auth",function(e,t,o){return o.auth.$requireAuth()["catch"](function(){e.go("home")})}]}}}}).state("get_started",{url:"/user/get_started",views:{"":{controller:"ProfileCtrl as profileCtrl",templateUrl:"auth/get_started.html",resolve:{userPosts:function(){return!1},isOwner:function(){return!0},profile:["Users","Auth",function(e,t){return t.auth.$requireAuth().then(function(t){return e.getProfile(t.uid).$loaded()})}],auth:["$state","Users","Auth",function(e,t,o){return o.auth.$requireAuth()["catch"](function(){e.go("home")})}]}},"header@get_started":{controller:"AuthCtrl as authCtrl",templateUrl:"templates/toolbar/main_toolbar.html"}}}).state("login",{url:"/user/login",views:{"":{templateUrl:"auth/login.html"},"login-form@login":{templateUrl:"templates/html/login-form.html"}}}).state("register",{url:"/user/register",views:{"":{templateUrl:"auth/register.html"}},resolve:{requireNoAuth:["$state","Auth",function(e,t){return t.auth.$requireAuth().then(function(t){e.go("home")},function(e){return e})}]}}),t.otherwise("/")}]).filter("orderObjectBy",function(){return function(e,t,o){var r=[];return angular.forEach(e,function(e){r.push(e.$id).set(e)}),r.sort(function(e,o){return e[t]>o[t]?1:-1}),o&&r.reverse(),r}}).filter("decodeURI",function(){return function(e){return e?decodeURI(e):""}}).filter("nl2br",["$sce",function(e){return function(t){return t?e.trustAsHtml(t.replace(/\n/g,"<br/>")):""}}]).constant("FirebaseUrl","https://bmxyz.firebaseio.com/");angular.module("App").controller("AuthCtrl",["$scope","Auth","Users","$state","$rootScope","$mdSidenav","$translate","$cookies","NotiService","$notification",function(e,t,o,r,n,i,l,a,s,u){console.log("authCtrl");var c=this;u.requestPermission().then(function(e){console.log(e)}),c.auth=t,c.users=o,c.notification=s,c.badgeValue=0,null!=t.ref.getAuth()?c.profile=c.users.getProfile(t.ref.getAuth().uid):c.profile="",c.user={email:"",password:""},e.$watch("NotiService.replyStatus(authCtrl.profile)",function(){console.log("watching reply status "+c.profile)}),e.$watch("badgeValue",function(){return console.log(">>>"+c.badgeValue.value),s.unreadNotification(c.profile.$id).then(function(e){c.badgeValue=e})}),console.log(c.badgeValue),c.resetCounter=function(){c.notification.resetUnread(c.profile.$id)},c.toggleLang=function(e){l.use(e),a.put("userLang",e),t.ref.getAuth()&&c.users.userArrRef(t.ref.getAuth().uid).update({lang:e})},c.profile.lang?c.toggleLang(c.profile.lang):a.get("userLang")?c.toggleLang(a.get("userLang")):c.toggleLang("Eng"),c.login=function(){c.auth.auth.$authWithPassword(c.user).then(function(e){r.go("dashboard")},function(e){c.error=e})},c.logout=function(){t.auth.$unauth(),r.go("login")},c.register=function(){t.auth.$createUser(c.user).then(function(e){c.login()},function(e){c.error=e})}}]),angular.module("App").factory("Auth",["$firebaseAuth","FirebaseUrl",function(e,t){var o=new Firebase(t),r=e(o);console.log("auth service");var n={ref:o,auth:r,getUid:function(){var e=o.getAuth();return null!=e?o.getAuth().uid:!1}};return n}]),angular.module("App").controller("CateCtrl",["$state","Category","cateName","cateTopics",function(e,t,o,r){var n=this;n.cateName=o,n.category=t,n.cateTopics=r,console.log("CateCtrl")}]),angular.module("App").factory("CateService",["$firebaseObject","$firebaseArray","FirebaseUrl",function(e,t,o){var r=new Firebase(o+"categories"),n=e(r);console.log("category service");var i={name:function(t){var o=r.orderByChild("slug").equalTo(t);return e(o)},fortopic:function(t){return e(usersRef.child(uid))},addChild:function(e){return r.child(e)},followList:function(e){var o=r.orderByChild("news/follower").equalTo(e);return t(o)},unFollow:function(e,t){var r=new Firebase(o+"categories/"+e+"/follower/"+t);r.remove()},userFollow:function(e,t){var r=!1,n=new Firebase(o+"categories/"+e+"/follower/"+t);return n.once("value",function(e){r=e.exists()}),r},arr:t(r),all:n};return i}]),angular.module("App").controller("DashboardCtrl",["Auth","$state","Category","CateService","Tags","Topics",function(e,t,o,r,n,i){var l=this;l.auth=e,l.cate=r,l.categories=o,l.topics=i,l.topic_grid=!1,l.tags=n.arr,l.userCateFollow=[],l.cateIsFollow=[],l.followList="",l.userFeed="null",l.latestFeed=l.topics.latestFeed(),l.followCate=function(t){l.cate.addChild(t+"/follower").child(e.ref.getAuth().uid).push().set(moment().toISOString())},console.log("DashboardCtrl")}]),angular.module("App").directive("mainHeader",function(){return{restrict:"E",transclude:!0,templateUrl:"templates/toolbar/main_toolbar.html"}}).directive("badgeNotification",function(){return{restrict:"E",transclude:!0,templateUrl:"templates/html/badge-notification.html",scope:{notification:"="}}}).directive("reviewScore",function(){return{templateUrl:"templates/html/review-summary-list.html",scope:{review:"="}}}).directive("userFollowerBtn",function(){return{restrict:"E",transclude:!0,templateUrl:"templates/html/follow-user.html",scope:{follow:"="}}}).directive("cateFollowBtn",function(){return{templateUrl:"templates/html/category-follow-btn.html",scope:{cate:"="}}}).directive("topicGrid",function(){return{templateUrl:"templates/html/category-grid.html"}}).directive("tagGrid",function(){return{templateUrl:"templates/html/tag-grid.html"}}).directive("topicCreate",function(){return{templateUrl:"templates/html/topic-create.html",scope:{topic:"="}}}).directive("topicList",function(){return{templateUrl:"templates/html/topic-list.html",scope:{topics:"="}}}).directive("topicActionsCard",function(){return{templateUrl:"templates/html/topic-actions-card.html",scope:{topic:"="}}}).directive("enforceMaxTags",function(){return{require:"ngModel",link:function(e,t,o,r){var n=o.maxTags?parseInt(o.maxTags,"4"):null;r.$parsers.push(function(e){return e&&n&&e.length>n&&e.splice(e.length-1,1),e})}}}),angular.module("App").config(["$translateProvider",function(e){e.translations("Eng",{KEY_DASHBOARD:"Dashboard",KEY_LANGUAGES:"Languages",KEY_HOME:"Home",KEY_REGISTER:"Register",KEY_LOGIN:"Log in",KEY_LOGOUT:"Log out",KEY_FOLLOW:"Follow",KEY_FOLLOWER:"Follower",KEY_UNFOLLOW:"Unfollow",KEY_FOLLOWING:"Following",KEY_POST:"Post",KEY_POSTED:"Posted",KEY_UPVOTE:"Upvote",KEY_UPVOTED:"Upvoted",KEY_DWN_VOTE:"Downvote",KEY_DWN_VOTED:"Downvoted",KEY_VIEW:"View",KEY_REMOVE:"Remove",KEY_CANCEL:"Cancel",KEY_QUESTION:"Question",KEY_TOPIC:"Topic",KEY_CHG_PWD:"Change Password",KEY_PASSWORD:"Password",KEY_OLD_PWD:"Old Password",KEY_NEW_PWD:"New Password",KEY_NEW_PWD_C:"New password confirmation",KEY_SAVE:"Save",KEY_SAVE_DRAFT:"Save as draft",KEY_TAGS:"Tags",KEY_EXPLORE:"Explore",KEY_FEAT_CAT:"Features categories",KEY_COMMENTS:"Comments",KEY_REPLY:"Reply",KEY_REVIEW:"Review",KEY_EDIT:"Edit",KEY_TREND:"Trend",KEY_TRENDING:"Trending",KEY_WRITE_REPLY:"Write a reply",KEY_LATEST_FEED:"Latest Feed",KEY_CONF_REMOVE:"Are you sure you want to remove?",KEY_CONF_REM_C:"Once remove, you will not be ableto to get this topic back",KEY_WHAT_ON_UR_MIND:"What's on your mind?",KEY_YOU_WANT_FOLLOW:"You may want to follow",KEY_NO_ACCT_REGISTER:"Don't have account? Register",KEY_CANT_CHNG_USER:"Don't have account? Register",KEY_YOUR_ACCOUNT:"Your account",KEY_NOTHING_HERE:"Nothing here, yet",KEY_WHO_TO_FOLLOW:"Who to follow",KEY_CAT_WILL_APPEAR:"Follow some categories and it will appear here",KEY_WHT_UR_STORY:"What's your story",KEY_WRT_COMMENT:"Write a comment",KEY_FIRSTNAME:"First name",KEY_LASTNAME:"Last name",KEY_BIRTHDAY:"Birthday",KEY_MONTH:"Month",KEY_DAY:"Day",KEY_EMAIL:"Email",KEY_CONF_EMAIL:"Confirm Email",KEY_GENDER:"Gender",KEY_MALE:"Male",KEY_FEMALE:"Female",KEY_USERNAME:"Username",KEY_LOCATION:"Location",KEY_ED_PROFILE:"Edit Profile",KEY_ED_CHG_PWD:"Change Password",KEY_ED_PROFILE:"Edit Profile",KEY_ED_SITE:"Website",KEY_ED_PHONE:"Phone",KEY_ED_BIO:"Biography"}),e.translations("ไทย",{KEY_DASHBOARD:"ห้องทั้งหมด",KEY_LANGUAGES:"ภาษา",KEY_HOME:"หน้าแรก",KEY_REGISTER:"สมัครใช้",KEY_LOGIN:"เข้าสู่ระบบ",KEY_FOLLOW:"ติดตาม",KEY_POST:"โพสต์"}),e.preferredLanguage("en")}]),angular.module("App").controller("NotiCtrl",["$state","Category","Topics","NotiService",function(e,t,o,r){var n=this;n.topics=o,n.feed=feed,n.notiService=r,n.notifyTo=function(e){return n.arr.push(e).$add(e)}}]),angular.module("App").factory("NotiService",["$firebaseObject","$firebaseArray","FirebaseUrl","Users","$notification","$q",function(e,t,o,r,n,i){var l=new Firebase(o+"notification"),a=e(l),s=r;console.log("noti service");var u={unreadNotification:function(e){var t,r=new Firebase(o+"notification/"+e+"/unread"),l=i.defer();return r.once("value",function(e){t=e.val(),console.log(e.val()),t>0&&(n("New message from Qanya",{body:"You have "+t+" unread messages",dir:"auto",lang:"en",tag:"my-tag",icon:"http://www.cl.cam.ac.uk/research/srg/netos/images/qsense-logo.png",focusWindowOnClick:!0}),l.resolve(t))}),l.promise},notifyFollower:function(e,t){var o=s.getFollower(t);o.once("value",function(t){t.forEach(function(t){u.updateNotificationCount(e,t.key())})})},replyStatus:function(e){return n("New message from Qanya",{body:"You have new message",dir:"auto",lang:"en",tag:"my-tag",icon:"http://www.cl.cam.ac.uk/research/srg/netos/images/qsense-logo.png",focusWindowOnClick:!0}),e},notifyLog:function(e,t,r){console.log("uid "+t),console.log("from uid "+r);var n=new Firebase(o+"notification/"+t);n.push().set({topicId:e,from:r,is_read:!1,timestamp:moment().toISOString()}),u.replyStatus(t)},resetUnread:function(e){var t=new Firebase(o+"notification/"+e+"/unread");t.set(0)},updateNotificationCount:function(e,t,r){var n=new Firebase(o+"notification/"+t+"/unread");n.once("value",function(e){"null"==e.val()?n.set(1):n.set(e.val()+1)},function(e){console.log("The read failed: "+e.code)}),u.notifyLog(e,t,r)},addChild:function(e){return l.child(e)},addArrChild:function(t){return e(l.child(t))},arr:t(l),all:a};return u}]),angular.module("App").controller("PlacesCtrl",["$state","$scope","$rootScope","$mdDialog","$mdMedia","Tags","Topics","Auth","Users","Slug","Languages","placeLanding",function(e,t,o,r,n,i,l,a,s,u,c,d){var f=this;console.log(d),f.placeLanding=d}]),angular.module("App").factory("Places",["$firebaseArray","FirebaseUrl",function(e,t){var o=new Firebase(t+"places"),r=new Firebase(t+"places_details"),n=e(o),i={addChild:function(e){return o.child(e)},addPlaceDetailChild:function(e){return r.child(e)},getPlaceRef:function(e){return o.child(e+"/info")},arr:n};return i}]),angular.module("App").factory("Category",["$firebaseObject","$firebaseArray","FirebaseUrl",function(e,t,o){var r=new Firebase(o+"categories"),n=e(r);t(r);console.log("Util category Service");var i={getName:function(t){var o=r.child(t);return e(o)},all:n};return i}]).factory("Languages",["$firebaseArray","FirebaseUrl",function(e,t){var o=new Firebase(t+"languages"),r=e(o);return console.log("Util language"),r}]).factory("Archive",["$firebaseArray","FirebaseUrl",function(e,t){var o=new Firebase(t+"archive"),r=e(o);console.log("Util language");var n={addChild:function(e){return o.child(e)},ref:o,arr:r};return n}]),angular.module("App").controller("TagCtrl",["Auth","Users","$state","$rootScope","tagLanding","tagName",function(e,t,o,r,n,i){var l=this;l.tagLanding=n,l.tagName=i}]),angular.module("App").factory("Tags",["$firebaseArray","$firebaseObject","FirebaseUrl","$q",function(e,t,o,r){var n=new Firebase(o+"tags"),i=e(n);console.log("tag service");var l={addChild:function(e){return n.child(e)},tagsUrl:function(){return e(n)},getTagRef:function(e){return n.child(e)},getTagObject:function(e){return t(n.child(e))},topicTags:function(e){var t=r.defer(),n=new Firebase(o);return n.child("tags/"+e).on("child_added",function(o){n.child("topics").orderByChild("tags").equalTo(e).on("child_added",function(e){return t.resolve(),extend({},o.val(),e.val())})})},arr:i};return l}]),angular.module("App").controller("TopicLandingCtrl",["$state","$scope","Slug","Topics","Auth","Users","isOwner","topicLanding","replyList","viewData","followers",function(e,t,o,r,n,i,l,a,s,u,c){console.log("topicLandingCtrl");var d=this;d.auth=n,d.users=i,d.topicLanding=a,d.topics=r,d.replyList=s,d.views=u,d.followers=c,d.isOwner=l,d.inReplyArr=[]}]),angular.module("App").controller("TopicCtrl",["$state","$scope","$rootScope","$mdDialog","$mdMedia","$http","FirebaseUrl","$translate","$notification","NotiService","Tags","Topics","Auth","Users","Slug","Places","Languages","Archive",function(e,t,o,r,n,i,l,a,s,u,c,d,f,p,g,h,m,v){console.log("topicCtrl");var w=this;w.tags=c,w.topics=d,w.auth=f,w.users=p,w.languages=m,w.places=h,w.archive=v,w.noti=u,null!=w.auth.ref.getAuth()?(w.profile=w.users.getProfile(w.auth.ref.getAuth().uid),w.uid=w.profile.$id,w.userRef=w.users.userRef(w.uid),w.userUpvotedTopics=w.users.upvotes(w.uid),w.userDownvotedTopics=w.users.downvotes(w.uid),w.userFollowing=w.users.following(w.uid)):(w.profile="",w.uid="",w.userRef=""),w.imageStrings=[],w.imageText=[],w.inReplyArr=[],w.loadBusy=!1,w.slugReturn=null,w.criteria=!1,w.criteriaReply=null,w.reviewCriteria=!1,w.critReplyData=null,w.newTopic={location:"",url:"",ipInfo:"",tags:""},t.$watch("",function(){console.log(">>> watching at topic controller")}),w.avgReviewReply=function(){for(var e=Object.keys(w.criteriaReply).length,t=0,o=0;e>o;o++)t+=w.criteriaReply[o];w.replyReviewAverage=t/e,console.log(w.criteriaReply),w.critReplyData={avg:w.replyReviewAverage,data:w.criteriaReply}},w.avgReviewScore=function(e){if(e){for(var t=0,o=0;o<e.length;o++)t+=e[o].rating;return t/e.length}},a(["KEY_REMOVE","KEY_CANCEL","KEY_CONF_REMOVE","KEY_CONF_REM_C"]).then(function(e){w.removeTrans=e.KEY_REMOVE,w.cancelTrans=e.KEY_CANCEL,w.confirmRem=e.KEY_CONF_REMOVE,w.confirmRemContent=e.KEY_CONF_REM_C}),w.userName=function(e){},w.showMdLogin=function(e){var o=(n("sm")||n("xs"))&&t.customFullscreen;r.show({templateUrl:"templates/html/md-login-form.html",parent:angular.element(document.body),targetEvent:e,clickOutsideToClose:!0,fullscreen:o})},w.decodeText=function(e){return console.log(decodeURI(e)),decodeURI(e)},w.loadMore=function(e){w.loadBusy=!0;for(var t=[],o=0;o<e.length;o++)t.push(e[o]);return console.log(t),t},w.loadTags=function(e){console.log(w.tags.tagsUrl())},w.uploadFile=function(e,t){angular.forEach(e,function(e,t){var o=new FileReader;o.onload=function(e){var o=e.target.result;w.imageStrings[t]=o},o.readAsDataURL(e.file)})},w.showConfirmRemove=function(t,o,n){var i=r.confirm().title(w.confirmRem).textContent(w.confirmRemContent).targetEvent(t).ok(w.removeTrans).cancel(w.cancelTrans);r.show(i).then(function(){w.removeTopic(o,n)&&e.go("dashboard")})},w.removeTopic=function(e,t){return e==w.uid?(moveFbRecord(w.topics.refChild(t.$id),w.archive.addChild(t.$id)),!0):!1},w.reply=function(e){w.topics.replyArr(e.$id).$add({topicId:e.$id,body:w.newReply.body,uid:w.uid,review:w.critReplyData,created:moment().toISOString()}).then(function(){w.noti.updateNotificationCount(e.$id,e.uid,w.uid)}),w.topics.replyCount(e.$id).$loaded().then(function(t){t.count?w.topics.replyCountRef(e.$id).set(t.count+1):w.topics.replyCountRef(e.$id).set(1)}),w.users.userRef(w.uid).child("stat/comment/count").set(w.profile.stat.comment.count+1),w.users.userRef(w.uid).child("stat/comment/topics/"+e.$id).push().set(moment().toISOString())},w.replyInReply=function(e,t){w.topics.replyInReplyArr(e,t).$add({body:w.replyInReply.body,uid:w.uid,created:moment().toISOString()})},w.addNewChoice=function(){var e=w.reviewCriteria.length+1;w.reviewCriteria.push({id:"criteria"+e})},w.removeChoice=function(){var e=w.reviewCriteria.length-1;w.reviewCriteria.splice(e)},w.createTopic=function(e,t){var o="";""!==w.newTopic.location&&(console.log(w.newTopic.location),o={place_id:w.newTopic.location.details.place_id,slug:g.slugify(w.newTopic.location.details.name),name:w.newTopic.location.details.name,address:w.newTopic.location.details.formatted_address,lat:w.newTopic.location.details.geometry.location.lat(),lng:w.newTopic.location.details.geometry.location.lng(),lng:w.newTopic.location.details.geometry.location.lng(),lng:w.newTopic.location.details.geometry.location.lng()}),w.topics.arr.$add({type:w.type,lang:w.newTopic.lang,topic:w.newTopic.topic,body:w.newTopic.body,category:e,uid:w.uid,slug:w.newTopic.topic,photos:w.imageStrings,photos_text:w.imageText,location:o,url:w.newTopic.url,draft:t,created:moment().toISOString(),tags:w.newTopic.tags,userIP:w.newTopic.ipInfo,review:w.reviewCriteria}).then(function(e){var t="";if(t=""==g.slugify(w.newTopic.topic)?w.newTopic.topic:g.slugify(w.newTopic.topic),w.topics.getTopicByKey(e.key()).update({slug:t+e.key()}),w.users.userRef(w.uid).child("stat/posted/count").set(w.profile.stat.posted.count+1),w.users.userRef(w.uid).child("stat/posted/topics/"+e.key()).push().set(moment().toISOString()),""!==o&&(w.places.addChild(o.place_id).child(e.key()).push().set(moment().toISOString()),w.places.addChild(o.place_id).child("info").set(o)),null!==w.newTopic.tags)for(var r=0;r<w.newTopic.tags.length;++r)w.tags.addChild(w.newTopic.tags[r].text).child(e.key()).push().set(moment().toISOString());w.noti.notifyFollower(e.key(),w.uid),w.newTopic={body:""}})},w.checkFollow=function(e){return w.users.checkFollow(w.uid,e)?!0:!1},w.followUser=function(e){w.users.getProfile(e).$loaded().then(function(t){w.users.userRef(e).child("stat/follower/count").set(t.stat.follower.count+1),w.users.userRef(e).child("stat/follower/uid/"+w.uid).push().set(moment().toISOString())}),w.users.getProfile(w.uid).$loaded().then(function(t){w.users.userRef(w.uid).child("stat/following/count").set(t.stat.follower.count+1),w.users.userRef(w.uid).child("stat/following/uid/"+e).push().set(moment().toISOString())})},w.unfollowUser=function(e){w.users.getProfile(e).$loaded().then(function(t){w.users.userRef(e).child("stat/follower/count").set(t.stat.follower.count-1),w.users.userRef(e).child("stat/follower/uid/"+w.uid).remove()}),w.users.getProfile(w.uid).$loaded().then(function(t){w.users.userRef(w.uid).child("stat/following/count").set(t.stat.following.count-1),w.users.userRef(w.uid).child("stat/following/uid/"+e).remove()})},w.upvote=function(e){void 0!=e.downvotes&&void 0!=e.downvotes[w.uid]&&w.cancelDownvote(e),w.topics.upvoteTopic(e.$id,w.uid).$loaded().then(function(t){w.userUpvotedTopics.child(e.$id).set(t.$value),w.users.getProfile(e.uid).$loaded().then(function(t){w.users.userRef(e.uid).child("stat/upvoted/count").set(t.stat.upvoted.count+1),w.users.userRef(e.uid).child("stat/upvoted/topics/"+e.$id).push().set(moment().toISOString())})})},w.cancelUpvote=function(e){w.topics.undoUpvote(e.$id,w.uid),w.users.getProfile(e.uid).$loaded().then(function(t){w.users.userRef(e.uid).child("stat/upvoted/count").set(t.stat.upvoted.count-1),w.users.userRef(e.uid).child("stat/upvoted/topics/"+e.$id).remove()}),w.userUpvotedTopics.child(e.$id).remove(function(e){e?console.log("Error:",e):console.log("Removed successfully!")})},w.downvote=function(e){void 0!=e.upvotes&&void 0!=e.upvotes[w.uid]&&w.cancelUpvote(e),w.topics.downvoteTopic(e.$id,w.uid).$loaded().then(function(t){w.userDownvotedTopics.child(e.$id).set(t.$value)})},w.cancelDownvote=function(e){w.topics.undoDownvote(e.$id,w.uid),w.userDownvotedTopics.child(e.$id).remove(function(e){e?console.log("Error:",e):console.log("Removed successfully!")})},w.followTopic=function(e){w.topics.follow(e.$id,w.uid).$loaded().then(function(t){w.userFollowing.child(e.$id).set(t.history[w.uid])})},w.unfollowTopic=function(e){w.topics.unfollow(e.$id,w.uid),w.userFollowing.child(e.$id).remove(function(e){e?console.log("Error:",e):console.log("Removed successfully!")})}}]),angular.module("App").factory("Topics",["$firebaseObject","$firebaseArray","FirebaseUrl",function(e,t,o){var r=new Firebase(o+"topics"),n=e(r);t(r);console.log("topic service");var i={getTopicReply:function(e){var r=new Firebase(o);r.child("topics/"+e+"/replies").once("value",function(o){o.forEach(function(o){var n=o.key();console.log(n),r.child("topics/"+e+"/replies/"+n).once("value",function(e){console.log(e.val().uid),console.log(e),r.child("users/"+e.val().uid).once("value",function(o){return console.log(e.val()),console.log(extend({},e.val(),o.val())),t(extend({},e.val(),o.val()))})})})})},getTag:function(e){return t(r.orderByChild("tags").equalTo(e))},getSlug:function(e){var o=r.orderByChild("slug").equalTo(e);return t(o)},createdBy:function(e){return t(r.orderByChild("uid").equalTo(e))},refChild:function(e){return r.child(e)},countUserTopics:function(){},list:function(e){var o=r.orderByChild("category").equalTo(e).limitToLast(15);return t(o)},name:function(t){var o=r.orderByChild("slug").equalTo(t);return e(o)},fortopicRef:function(e){return r.orderByChild("slug").equalTo(e)},getTopicByKey:function(e){return new Firebase(o+"topics/"+e)},getTopicBySlug:function(e){return t(r.orderByChild("slug").equalTo(e).limitToFirst(1))},incrementView:function(e){},fortopic:function(e){return t(i.fortopicRef(e))},replyList:function(e){var o=r.child(e+"/replies");return t(o)},replyArr:function(e){return t(r.child(e+"/replies"))},replyCount:function(t){return e(r.child(t+"/replies/"))},replyCountRef:function(e){return r.child(e+"/replies/count")},replyInReply:function(e,o){return t(r.child(e+"/replies/"+o+"/inReply"))},replyInReplyArr:function(e,o){return t(r.child(e+"/replies/"+o+"/inReply"))},getUpvotes:function(e){return{ref:r.child(e+"/upvotes"),array:t(r.child(e+"/upvotes"))}},getDownvotes:function(e){return{ref:r.child(e+"/downvotes"),array:t(r.child(e+"/downvotes"))}},getFollowers:function(t){return{ref:r.child(t+"/followers"),obj:e(r.child(t+"/followers"))}},upvoteTopic:function(t,o){return r.child(t+"/upvotes").child(o).set(moment().toISOString()),e(r.child(t+"/upvotes").child(o))},undoUpvote:function(e,t){return r.child(e+"/upvotes").child(t).remove(function(e){e?console.log("Error:",e):console.log("Removed successfully!")}),r.child(e+"/upvotes")},downvoteTopic:function(t,o){return r.child(t+"/downvotes").child(o).set(moment().toISOString()),e(r.child(t+"/downvotes").child(o))},undoDownvote:function(e,t){return r.child(e+"/downvotes").child(t).remove(function(e){e?console.log("Error:",e):console.log("Removed successfully!")}),r.child(e+"/downvotes")},follow:function(t,o){return r.child(t+"/followers").child("history").child(o).set(moment().toISOString()),e(r.child(t+"/followers").child("count")).$loaded().then(function(e){null===e.value||void 0===e.value?r.child(t+"/followers").child("count").set(1):r.child(t+"/followers").child("count").set(e.$value+1)}),e(r.child(t+"/followers"))},unfollow:function(t,o){return r.child(t+"/followers").child("history").child(o).remove(function(o){o?console.log("Error:",o):(console.log("Removed successfully!"),e(r.child(t+"/followers").child("count")).$loaded().then(function(e){r.child(t+"/followers").child("count").set(e.$value-1)}))}),r.child(t+"/followers")},getViews:function(t){return{ref:r.child(t).child("views"),obj:e(r.child(t).child("views"))}},latestFeed:function(){return t(r.orderByChild("created").limitToLast(10))},topicsByTag:function(e){return t(r.orderByChild("tags").equalTo(e))},arr:t(r),all:n,ref:r};return i}]),angular.module("App").controller("ProfileCtrl",["$scope","$rootScope","$state","$filter","md5","Auth","Users","Topics","notify","CateService","profile","isOwner","userPosts",function(e,t,o,r,n,i,l,a,s,u,c,d,f){console.log("ProfileCtrl");var p=this;p.profile=c,p.auth=i,p.users=l,p.topics=a,p.isOwner=d,p.cate=u,p.$state=o,p.userPosts=f,p.userFeed="",p.feed="",p.editInit="userEdit",p.nameExist=!1,p.getUserPost=function(e){p.feed=p.topics.createdBy(e)},p.oldProfileValue=p.profile,
p.userCreated=function(e){return p.topics.createdBy(e)},p.imageStrings=[],p.userCateFollow=[],p.cateIsFollow=[],p.followList="",p.followCateListArr=function(e){p.followList=p.cate.followList(e)},i.ref.getAuth()&&p.followCateListArr(i.ref.getAuth().uid),p.followCate=function(e,t){p.cateIsFollow[e]=!0,p.cate.addChild(t+"/follower").child(i.ref.getAuth().uid).push().set(moment().toISOString())},p.uploadFile=function(e){angular.forEach(e,function(e,t){var o=new FileReader;o.onload=function(e){var o=e.target.result;p.imageStrings[t]=o,p.users.userArrRef(i.ref.getAuth().uid).update({photo:o}),s({message:"Saved",position:"center",duration:3e3})},o.readAsDataURL(e.file)})},p.saveProfile=function(e){p.profile.updated=moment().toISOString(),null!==p.location&&(locationDetail={place_id:p.location.details.place_id,name:p.location.details.name,address:p.location.details.formatted_address,lat:p.location.details.geometry.location.lat(),lng:p.location.details.geometry.location.lng()},p.profile.userLocation=locationDetail),p.profile.$save().then(function(){s({message:"Saved",position:"center",duration:3e3}),void 0!==e&&o.go(e)})["catch"](function(e){s({message:"Error saving data",position:"center",duration:3e3})})},p.updateName=function(){p.users.userArrRef(i.ref.getAuth().uid).update({firstname:p.profile.firstname,lastname:p.profile.lastname}),p.users.userArrRef(i.ref.getAuth().uid+"/log").push().set({action:"name_change",oldname:p.oldProfileValue.firstname+"-"+p.oldProfileValue.lastname,created:moment().toISOString()}),s({message:"Saved",position:"center",duration:3e3})},p.updateBio=function(){p.users.userArrRef(i.ref.getAuth().uid).update({biography:p.profile.biography}),s({message:"Saved",position:"center",duration:3e3})},p.updateProfile=function(){p.profile.$save().then(function(){o.go("dashboard")})},p.checkUsername=function(){p.users.checkUsernameExist(p.profile.displayName).once("value",function(e){return null!==e.val()?p.nameExist=!0:p.nameExist=!1})}}]),angular.module("App").factory("Users",["$firebaseArray","$firebaseObject","FirebaseUrl","$http",function(e,t,o,r){var n=new Firebase(o+"users"),i=e(n);console.log("User Service");var l={getLocationIP:function(){return r({url:"http://ipinfo.io/json",method:"GET"})},getLocationIPData:function(){return r({url:"http://ipinfo.io/json",method:"GET"}).then(function(e){return e.data})},profile:function(e){return i.$getRecord(e)},getProfileByUsername:function(t){return e(n.orderByChild("displayName").equalTo(t))},checkUsernameExist:function(e){return n.orderByChild("displayName").equalTo(e)},getProfile:function(e){return console.log(e),t(n.child(e))},getDisplayName:function(e){return console.log(e),null!==e||""!==e?i.$getRecord(e).displayName:void 0},getFollower:function(e){return n.child(e+"/stat/follower/uid")},checkFollow:function(e,t){var r=!1,n=new Firebase(o+"users/"+e+"/stat/following/uid/"+t);return n.once("value",function(e){r=e.exists()}),r},userChangePassword:function(e,t,r){var n=new Firebase(o);n.changePassword({email:e,oldPassword:t,newPassword:r},function(e){if(e)switch(e.code){case"INVALID_PASSWORD":console.log("The specified user account password is incorrect.");break;case"INVALID_USER":console.log("The specified user account does not exist.");break;default:console.log("Error changing password:",e)}else console.log("User password changed successfully!")})},userRef:function(e){return n.child(e)},upvotes:function(e){return n.child(e).child("upvotes")},downvotes:function(e){return n.child(e).child("downvotes")},following:function(e){return n.child(e).child("following")},userArrRef:function(e){return n.child(e)},all:i};return l}]),angular.module("App").factory("UniqueIDGenerator",function(){return{generatePushID:function(){var e="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",t=0,o=[],r=(new Date).getTime(),n=r===t;t=r;for(var i=new Array(8),l=7;l>=0;l--)i[l]=e.charAt(r%64),r=Math.floor(r/64);if(0!==r)throw new Error("We should have converted the entire timestamp.");var a=i.join("");if(n){for(l=11;l>=0&&63===o[l];l--)o[l]=0;o[l]++}else for(l=0;12>l;l++)o[l]=Math.floor(64*Math.random());for(l=0;12>l;l++)a+=e.charAt(o[l]);if(20!=a.length)throw new Error("Length should be 20.");return a}}});
//# sourceMappingURL=data:application/json;base64,
